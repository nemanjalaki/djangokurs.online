###########
# BUILDER #
###########

# pull official base image
FROM python:3.11-slim as builder

# The /app directory should act as the main application directory
WORKDIR /usr/src/djangokurs.online

# Prevents Python from buffering stdout and stderr
ENV PYTHONBUFFERD 1

# Prevents Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE 1

# install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc

# lint
RUN pip3 install --upgrade pip
RUN pip install flake8==6.0.0
COPY . ./usr/src/djangokurs.online/
# RUN flake8 --ignore=E501,F401 .

# install python dependencies
COPY requirements.txt requirements.txt
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/djangokurs.online/wheels -r requirements.txt

#########
# FINAL #
#########

# pull official base image
FROM python:3.11-slim

# create directory for the app user
RUN mkdir -p /home/djangokurs.online

# create the app(django) user
RUN addgroup --system django && adduser --system --group django

# create the appropriate directories
ENV HOME=/home/djangokurs.online
ENV APP_HOME=/home/djangokurs.online/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
WORKDIR $APP_HOME

# install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends netcat-traditional
COPY --from=builder /usr/src/djangokurs.online/wheels /wheels
COPY --from=builder /usr/src/djangokurs.online/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# copy entrypoint.sh
COPY entrypoint.prod.sh entrypoint.prod.sh
RUN sed -i 's/\r$//g' $APP_HOME/entrypoint.prod.sh
RUN chmod +x $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R django:django $APP_HOME

# change to the app user
USER django

# run entrypoint.prod.sh
ENTRYPOINT ["bash","/home/djangokurs.online/web/entrypoint.prod.sh"]